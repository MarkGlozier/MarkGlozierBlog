<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://markglozier.github.io/MarkGlozierBlog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://markglozier.github.io/MarkGlozierBlog/" rel="alternate" type="text/html" /><updated>2022-01-16T08:42:39-06:00</updated><id>https://markglozier.github.io/MarkGlozierBlog/feed.xml</id><title type="html">Markâ€™s Blog</title><subtitle>A blog about my Fast AI journey.</subtitle><entry><title type="html">Title</title><link href="https://markglozier.github.io/MarkGlozierBlog/2022/01/15/BearClassifier.html" rel="alternate" type="text/html" title="Title" /><published>2022-01-15T00:00:00-06:00</published><updated>2022-01-15T00:00:00-06:00</updated><id>https://markglozier.github.io/MarkGlozierBlog/2022/01/15/BearClassifier</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">First Post</title><link href="https://markglozier.github.io/MarkGlozierBlog/2022/01/12/first-post.html" rel="alternate" type="text/html" title="First Post" /><published>2022-01-12T00:00:00-06:00</published><updated>2022-01-12T00:00:00-06:00</updated><id>https://markglozier.github.io/MarkGlozierBlog/2022/01/12/first-post</id><author><name></name></author><summary type="html"><![CDATA[Where I think deep learning could be useful for producing guitar tablature Imagine a model that could take a song and convert that to guitar tablature. Once this capability was created, another model may then even be able to convert this to musical notation! The data for the model would need to be in a format suitable for a deep learning model. A video or song first needs to be converted to an audio format, such as .mp3. As deep-learning models excel in image classification, this audio file could then be represented as an image, such as a spectrogram. To start, perhaps limit the model to work with guitar-centric songs and videos, of which there are plenty of on YouTube, such as guitar covers, backing tracks and representations of songs. These guitar-only songs could then be matched with tablature already available on the internet. For example, a popular database of guitar tablature is ultimate-guitar.com. Data for songs could either be labelled manually (perhaps to start with), or even (eventually) be labelled automatically by matching the song name (contained within the file name) with the highest rated tablature from a search on ultimate-guitar.com. The model could then be trained on these songs, labelled with their correct tablature. Use the guidance in Chapter 2 to achieve this. Then the user could deploy it following the recommended process. First, use a manual process. So find a guitar-only piece that has high-rated tablature available for it. Then compare this to the results of the model (maybe even play both on the guitar and compare!). Then, deploy it to a limited number of users for a trial period. Gain feedback from these users and use this information to re-train the model (they may find that the model performs better with say acoustic guitar oriented songs as compared to heavily distorted elecric-guitar based songs). Then, gradually increase the scope of the rollout. Release an alpha, then beta version, collecting user feedback and improving for both. For betas and the first (and future) production releases, implement a reporting system that collects feedback from the users. i.e. are the users satisfied with the results that the model outputs? The main thing that can go wrong with the model is producing incorrect tablature. So in the reporting system, contain metrics that compare the model output with any tablature that is available online (if there is any).]]></summary></entry><entry><title type="html">Fastpages Notebook Blog Post</title><link href="https://markglozier.github.io/MarkGlozierBlog/jupyter/2020/02/20/test.html" rel="alternate" type="text/html" title="Fastpages Notebook Blog Post" /><published>2020-02-20T00:00:00-06:00</published><updated>2020-02-20T00:00:00-06:00</updated><id>https://markglozier.github.io/MarkGlozierBlog/jupyter/2020/02/20/test</id><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[A tutorial of fastpages for Jupyter notebooks.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://markglozier.github.io/MarkGlozierBlog/images/chart-preview.png" /><media:content medium="image" url="https://markglozier.github.io/MarkGlozierBlog/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An Example Markdown Post</title><link href="https://markglozier.github.io/MarkGlozierBlog/markdown/2020/01/14/test-markdown-post.html" rel="alternate" type="text/html" title="An Example Markdown Post" /><published>2020-01-14T00:00:00-06:00</published><updated>2020-01-14T00:00:00-06:00</updated><id>https://markglozier.github.io/MarkGlozierBlog/markdown/2020/01/14/test-markdown-post</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[A minimal example of using markdown with fastpages.]]></summary></entry></feed>